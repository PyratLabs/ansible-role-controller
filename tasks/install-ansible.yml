---

- name: Ensure the venv suffix is set
  set_fact:
    controller_ansible_venv_suffix: "{{ controller_ansible_version }}"
  when: controller_ansible_venv_suffix is not defined
        or not controller_ansible_venv_suffix

- name: Ensure the Ansible install directory exists
  file:
    path: "{{ controller_ansible_install_dir }}"
    state: directory

- name: Ensure the Ansible bin directory exists
  file:
    path: "{{ controller_ansible_bin_dir }}"
    state: directory
  when: controller_ansible_install_venv_helper is defined
        and controller_ansible_install_venv_helper

- name: Ensure Python 3 interpreter is used by Ansible
  set_fact:
    ansible_python_interpreter: "{{ controller_python3_path }}"

- name: Ensure Ansible is installed in a virtual environment
  pip:
    name: ansible
    version: "{{ controller_ansible_version }}"
    state: present
    virtualenv: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}-{{ controller_ansible_venv_suffix }}"
    virtualenv_command: "{{ controller_python3_path }} -m venv"
    virtualenv_site_packages: "{{ controller_ansible_venv_site_packages | default(False) }}"

- name: Ensure selinux bindings are installed in a virtual environment
  pip:
    name: selinux
    state: present
    virtualenv: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}-{{ controller_ansible_venv_suffix }}"
    virtualenv_command: "{{ controller_python3_path }} -m venv"
  when: ansible_selinux is defined and ansible_selinux.status == "enabled"

- name: Ensure Ansible support packages are installed in a virtual environment
  pip:
    name: "ansible[{{ item }}]"
    version: "{{ controller_ansible_version }}"
    state: present
    virtualenv: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}-{{ controller_ansible_venv_suffix }}"
    virtualenv_command: "{{ controller_python3_path }} -m venv"
    virtualenv_site_packages: "{{ controller_ansible_venv_site_packages | default(False) }}"
  loop: "{{ controller_ansible_support_packages }}"
  when: controller_ansible_support_packages is defined
        and controller_ansible_support_packages | length > 0

- name: Ensure the originally configured Python interpreter is used by Ansible
  set_fact:
    ansible_python_interpreter: "{{ controller_ansible_python_interpreter }}"
  when: controller_ansible_python_interpreter is defined

- name: Ensure the current release is symlinked in the install directory
  file:
    src: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}-{{ controller_ansible_venv_suffix }}"
    dest: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}"
    state: link

- name: Ensure venv wrapper exists in virtualenv bin directory
  template:
    src: venv.sh.j2
    dest: "{{ controller_ansible_install_dir }}/{{ controller_ansible_venv_name }}-{{ controller_ansible_venv_suffix }}/bin/venv"
    mode: 0755
  loop:
    - python

- name: Ensure venv helper exists for ansible in bin directory
  template:
    src: venv.sh.j2
    dest: "{{ controller_ansible_bin_dir }}/{{ item }}"
    mode: 0755
  loop: "{{ controller_ansible_command_list }}"
  when: controller_ansible_install_venv_helper is defined
        and controller_ansible_install_venv_helper

- name: Ensure Ansible configuration directory exists
  file:
    path: "{{ controller_ansible_config_path | dirname }}"
    state: directory

- name: Ensure Ansible inventory directory exists
  file:
    path: "{{ controller_ansible_inventory_path | dirname }}"
    state: directory

- name: Ensure Ansible roles directory exists
  file:
    path: "{{ controller_ansible_roles_dir }}"
    state: directory

- name: Ensure Ansible projects directory exists
  file:
    path: "{{ controller_ansible_projects_dir }}"
    state: directory
